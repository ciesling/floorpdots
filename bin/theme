#!/usr/bin/env bash
# theme handling utility for global themes
# author: cherrynoize
# https://github.com/cherrynoize/dotfiles

get_all_themes () {
  find "$user_themes_dir"/* "$base_themes_dir"/* -maxdepth 0 -type f -iname "*$theme_ext" -exec basename {} \;
}

# themes location
config_dir="${XDG_CONFIG_HOME:-"$HOME/.config"}"
user_themes_dir=${user_themes_dir:-"$config_dir/themes"}
base_themes_dir="/etc/themes"
current_theme_file=${current_theme_file:-"$HOME/.current-theme"}
old_theme="$(cat "$current_theme_file")"

# global theme history
cache_dir="${XDG_CACHE_HOME:-"$HOME/.cache"}"
hst_dir="$cache_dir/themes/hst"
hst_file="$hst_dir/global-history"
# maximum number of history entries
hst_size="$(get_all_themes | sort -u | wc -l)"

# current theme state
theme_settings="$HOME/.local/state/themes/current.ini"

nid="6699" # notification id

notification () {
  if [ -n "$use_notification" ]; then
    if [ -z "$no_icon" ]; then
      icon="ðŸ–¼ "
    fi

    title="${1:-"${icon}Theme $theme_name set"}"
    body="$2"

    notify-send -r "$nid" "$title" "$body"
  fi
}

update_theme () {
  echo "$theme_file" > "$current_theme_file"
}

reload_theme_settings () {
  declare -A dock
  dock[enabled]="$(iniget "$theme_settings" Dock enabled)"

  if [ "${dock[enabled]}" = true ]; then
    dock launch
  elif [ "${dock[enabled]}" = false ]; then
    dock close
  fi
}

update_history () {
  cur_theme="${1:-"$theme_file"}"

  # if new theme is the same as previous theme
  if [ "$cur_theme" = "$old_theme" ]; then
    return
  fi

  # update history entries
  if [ -f "$hst_file" ]; then
    # remove duplicate entries
    sed -i "/$cur_theme/d" "$hst_file"
    # remove old entries
    hist_buf="$(tail -n $hst_size < "$hst_file")"
    echo "$hist_buf" > "$hst_file"
  fi

  # append current theme to file
  echo "$cur_theme" >> "$hst_file"
}

usage () {
local program_name="$(basename -- "$0")"
cat<<EOF
usage: $program_name [command] [options] [theme]
commands:
  show               show current theme
  list               list available themes (in alphabetical order, user themes first then base themes)
  recent             sort available themes by most recently used (remaining themes are sorted alphabetically)
  name [theme]       show theme name (defaults to current)
  prev               set previous theme
  next               set next theme
  random             set random theme
  set [theme]        set theme
  help               show this help message
options:
  -d|--dir [dir]     use theme directory
  -t|--theme [theme] use theme (-t|--theme can be omitted after command)
  -e|--ext [ext]     use theme file extension (defaults to none)
  -n|--notification  show notifications
  -I|--no-icon       do not use icons in notification
  -h|--help          show this help message
EOF
}

get_theme () {
  _theme_file="$1"
  if [ -f "$user_themes_dir/$_theme_file$theme_ext" ]; then
    echo "$user_themes_dir/$_theme_file$theme_ext"
  elif [ -f "$base_themes_dir/$_theme_file$theme_ext" ]; then
    echo "$base_themes_dir/$_theme_file$theme_ext"
  fi
}

get_recently_used_themes () {
  recent_themes="$(tac "$hst_file")"
  printf "%s\n%s" "$recent_themes" "$(get_all_themes)" | awk '!a[$0]++'
}

do_cmd () {
  themerc="$(get_theme "$theme_file")"
  if [ -n "$themerc" ] && [ "$themerc" != "" ]; then
    . "$themerc"
  fi

  current_theme="$(cat "$current_theme_file")"
  mapfile -t themes < <(get_all_themes)

  case "$1" in
    current)
      if [ -z "$show_dir" ]; then
        echo "$current_theme"
      else
        echo "$user_themes_dir"
      fi
      ;;
    path)
      printf "%s\n" "${themes[@]}"
      ;;
    list)
      for _theme in "${themes[@]}"; do
        printf "%s\n" "$(basename "$_theme")"
      done
      ;;
    recent)
      get_recently_used_themes
      ;;
    name)
      if [ -n "$theme_name" ]; then
        echo "$theme_name"
      else
        theme_file="$current_theme"
        do_cmd name
      fi
      ;;
    prev|next)
      for ((i=0; i<${#themes[@]}; i++)); do
        if [ "${themes[$i]}" = "$current_theme" ]; then
          if [ "$1" = "prev" ]; then
            new_index=$((i-1))
          else
            new_index=$((i+1))
          fi
          theme_file="${themes[$new_index]}"
          do_cmd set
        fi
      done
      ;;
    random)
      theme_file="$(random-file "$user_themes_dir" "$base_themes_dir" -I "$current_theme$theme_ext")"
      theme_file="${theme_file%.*}"
      do_cmd set
      ;;
    reload)
      reload_theme_settings
      ;;
    get)
      iniget "$theme_settings" "${args[@]:1}"
      exit
      ;;
    edit)
      iniset "$theme_settings" "${args[@]:1}"
      exit
      ;;
    set)
      if [ -z "$theme_file" ]; then
        return
      fi

      set_theme
      update_theme
      reload_theme_settings
      update_history "$theme_file"
      notification
      ;;
    *)
      echo "error: unknown command $1"
      exit 1
      ;;
  esac
}

args=("$@")

while [ -n "$1" ]; do
  case "$1" in
    help|-h|--help)
      usage
      exit
      ;;
    -d|--dir)
      if [ -n "$2" ]; then
        themes_dir="$2"
        shift 2
      else
        show_dir=1
        shift
      fi
      ;;
    -t|--theme)
      theme_file="$2"
      shift 2
      ;;
    -e|--ext)
      theme_ext="$2"
      shift 2
      ;;
    -n|--notification)
      use_notification=1
      shift
      ;;
    -I|--no-icon)
      no_icon=1
      shift
      ;;
    -*)
      echo "error: unknown option $1"
      exit 1
      ;;
    *)
      # set command first then theme name
      if [ -z "$cmd" ]; then
        cmd="$1"
      else
        theme_file="$1"
      fi
      shift
      ;;
  esac
done

do_cmd "$cmd"
