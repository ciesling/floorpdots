#!/usr/bin/env bash
# switch between different themes
# author | cherrynoize
# https://github.com/cherrynoize/dotfiles

# where to store theme history
cache_dir="$HOME/.cache/theme-history"
# size for each file
hst_size=10

# keep preferred theme where already set and do not change
preferred_theme=wpgtk

# list of contexts to call when calling switch --global
declare -a all_ctx=(
  "wallpaper"
  "eww-bar"
  "eww-bar-ui"
  "polybar"
  "bspwm"
  "bspwm-colors"
)

# run actions and exit
terminate () {
  eval "$post_exec"
}

# show help message
usage () {
local program_name="$(basename -- "$0")"
cat<<EOF
usage: $program_name [context|-g|--global] [theme|options]
context:
  list available contexts with $program_name -l
  -g|--global runs on all contexts
options:
  -t|--toggle   toggle between themes
  -c|--current  show current theme
  -l|--list     list available contexts/themes
  -r|--random   set random theme
  -q|--quiet    quiet mode
  -h|--help     show this help message
EOF
}

# add entry if theme changed
update_history () {
  cur_theme="$(readlink "$config_link")"

  # if theme has changed
  if [ ! "$cur_theme" = "$new_theme_name" ]; then
    # verify cache dir exists
    mkdir -p "$cache_dir"
    # history file
    hst_file="$cache_dir/$_ctx"

    # update history
    if [ -f "$hst_file" ]; then
      # remove duplicate entries
      sed -i "/$cur_theme/d" "$hst_file"
      # remove old entries
      hist_buf="$(tail -n $hst_size < "$hst_file")"
      echo "$hist_buf" > "$hst_file"
    fi

    # append current theme
    echo "$cur_theme" >> "$hst_file"
  fi
}

# toggle most recent theme in history
toggle_theme () {
  # history file
  hst_file="$cache_dir/$_ctx"
  # most recent theme
  lst_theme="$(tail -n 1 < "$hst_file")"
  # set last theme recursively
  exec "$0" "$_ctx" "$lst_theme"
}

# parse args
while [ -n "$1" ]; do
  case "$1" in
    -h|--help)
      usage
      exit
      ;;
    -t|--toggle)
      toggle_theme
      exit
      ;;
    -c|--current)
      show=1
      shift
      ;;
    -l|--list)
      list=1
      shift
      ;;
    -r|--random)
      random=1
      shift
      ;;
    -q|--quiet)
      quiet=1
      shift
      ;;
    -a|--global)
      # if we had already set a context
      if [ -n "$_ctx" ]; then
        # it becomes the theme
        new_theme_name="$_ctx"
      fi
      # set context to global
      _ctx="$1"
      shift
      ;;
    *)
      if [ -z "$_ctx" ]; then
        # set context first
        _ctx="$1"
      else
        # then theme
        new_theme_name="$1"
      fi
      shift
      ;;
  esac
done

case "$_ctx" in
  -g|--global)
    for c in "${all_ctx[@]}"; do
      # set mode for each context recursively
      "$0" "$c" "$new_theme_name"
    done
    terminate
    ;;
  "")
    if [ -n "$list" ]; then
      echo "${all_ctx[*]}"
      exit
    fi

    config_dir="."
    config_link_name="current"
    config_ext=""
    ;;
  wallpaper)
    config_dir="$HOME/.wallpaper-themes"
    config_link_name="current"
    config_ext=""
    post_exec+="change-wallpaper;"
    ;;
  eww-bar)
    config_dir="$HOME/.config/eww/bar/themes"
    config_link_name="current"
    config_ext=""
    post_exec+="switch-bar reload;"
    ;;
  eww-bar-ui)
    config_dir="$HOME/.config/eww/bar/ui"
    config_link_name="current"
    config_ext=""
    post_exec+="switch-bar reload;"
    ;;
  polybar)
    config_dir="$HOME/.config/polybar/themes"
    config_link_name="current"
    config_ext=""
    post_exec+="switch-bar reload;"
    ;;
  rofi)
    config_dir="$HOME/.config/rofi/themes/"
    config_link_name="current"
    config_ext=".rasi"
    post_exec+=""
    ;;
  bspwm)
    config_dir="$HOME/.config/bspwm/themes"
    config_link_name="current"
    config_ext=""
    post_exec+="bspc wm -r"
    ;;
  bspwm-colors)
    config_dir="$HOME/.config/bspwm/colorschemes"
    config_link_name="current"
    config_ext=""
    post_exec+="bspc wm -r"
    ;;
  *)
    echo "error: invalid input. could not find context \`$_ctx\`"
    exit 2
    ;;
esac

new_theme_with_ext="$new_theme_name$config_ext"
config_link_name_with_ext="$config_link_name$config_ext"
config_link="$config_dir/$config_link_name_with_ext"

current_theme="$(readlink "$config_link")"

if [ -n "$show" ]; then
  # print current theme
  echo "$current_theme"
  exit
elif [ -n "$list" ]; then
  # list available themes
  ls "$config_dir" -I "$config_link_name_with_ext"
  exit
elif [ -z "$current_theme" ] || [ "$current_theme" != "$preferred_theme" ]; then
  if [ -n "$random" ]; then
    # set random theme
    new_theme_with_ext="$(random-file "$config_dir" -I "$config_link_name_with_ext" -I "$current_theme")"
  elif [ -z "$new_theme_name" ]; then
    # if no theme is set show usage then exit
    usage
    exit
  fi

  # set new theme if not preferred theme
  if [ -e "$config_dir/$new_theme_name$config_ext" ]; then
    if [ -e "$config_link" ]; then
      if [ -L "$config_link" ]; then
        # append current theme to history file
        [ -z "$quiet" ] && update_history
        # remove current link
        rm "$config_link"
      else
        echo "error: \`$config_link\` is not a symlink."
        exit 3
      fi
    fi
    # point link to new theme
    ln -s "$new_theme_with_ext" "$config_link"
  else
    echo "error: theme \`$new_theme_name\` not found."
    exit 3
  fi
  terminate
fi

# TODO
# - global theme abstraction layer like in switch-mode
# - optional theme option to toggle command to toggle
#   between last two themes only if either is given
#   theme, otherwise set given theme
# - prev and next options
# - modular structure making it easy to add/remove themes defined
#   in conf files (also providing theme name to be read from
#   selector - if not provided defaults to name currently used)
