#!/usr/bin/env bash
# switch between different themes
# author | cherrynoize
# https://github.com/cherrynoize/dotfiles

# where to store theme history
cache_dir="$HOME/.cache/themes/hst"
# size for each file
hst_size=10

# theme to preserve when run in global mode
preferred_theme=wpgtk
# always keep preferred theme where already set and do not change.
# by default this is only set when run in global mode (can be
# inhibited by commenting out preferred_theme.)
#preserve_preferred_theme=false

# notification id
nid="6699"

# list of contexts to call when calling switch --global
declare -a all_ctx=(
  "wallpaper"
  "eww"
  "polybar"
  "bspwm"
  "bspwm-colors"
)

error () {
  printf "%s\n" "${@:2}"
  exit "$1"
}

notification () {
  if [ -n "$use_notification" ]; then
    if [ -n "$use_icon" ] && [ -z "$1" ]; then
      icon="ðŸ–¼ "
    fi

    title="${1:-"$icon${_ctx^} theme set"}"
    body="$2"

    notify-send -r "$nid" "$title" "$body"
  fi
}

# run actions and exit
terminate () {
  eval "$post_exec" || true
}

# show help message
usage () {
local program_name="$(basename -- "$0")"
cat<<EOF
usage: $program_name [context|-g|--global] [theme|options]
context:
  list available contexts with $program_name -l
  -g|--global runs on all contexts
options:
  -t|--toggle   toggle between themes
  -c|--current  show current theme
  -l|--list     list available contexts/themes
  -r|--random   set random theme
  -q|--quiet    quiet mode
  -h|--help     show this help message
EOF
}

get_current_theme () {
  cur_theme="$(readlink "$config_link")"
  echo "${cur_theme%"$config_ext"}"
}

get_history_file () {
  if [ ! -d "$cache_dir" ]; then
    mkdir -p "$cache_dir"
  fi

  hst_file="$cache_dir/$_ctx"
  echo "$hst_file"
  if [ ! -f "$hst_file" ]; then
    exit 3
  fi
}

# add entry if theme changed
update_history () {
  cur_theme="$(get_current_theme)"

  # if theme has changed
  if [ ! "$cur_theme" = "$new_theme_name" ]; then
    hst_file="$(get_history_file)"

    # update history
    if [ -f "$hst_file" ]; then
      # remove duplicate entries
      sed -i "/$cur_theme/d" "$hst_file"
      # remove old entries
      hist_buf="$(tail -n $hst_size < "$hst_file")"
      echo "$hist_buf" > "$hst_file"
    fi

    # append current theme
    echo "$cur_theme" >> "$hst_file"
  fi
}

set_theme () {
  old_theme_mode="$(switch-mode "$_ctx" -c)"

  get_new_theme_with_ext () {
    echo "${new_theme_with_ext:-"$new_theme_name$config_ext"}"
  }

  update_config_link () {
    if [ -L "$config_link" ]; then
      # append current theme to history file
      [ -z "$quiet" ] && update_history
      # remove current link
      rm "$config_link"
    elif [ -e "$config_link" ]; then
      error 3 "error: $config_link is not a symlink"
    fi

    # point link to new theme
    ln -s "${themes_dir:+"$themes_dir/"}$(get_new_theme_with_ext)" "$config_link"
  }

  enforce_old_theme_mode () {
    # if previous theme mode was different from new one
    if [ -n "$old_theme_mode" ] && [ "$old_theme_mode" != "$(switch-mode "$_ctx" -c)" ]; then
      switch-mode "$_ctx" "$old_theme_mode"
    fi
  }

  if [ -z "$preferred_theme" ] || [ "$preserve_preferred_theme" != "true" ] || [ "$current_theme" != "$preferred_theme" ]; then
    if [ -n "$random" ]; then
      # set random theme
      new_theme_with_ext="$(random-file "${themes_dir:-"$config_dir"}" -I "$config_link_name_with_ext" -I "$current_theme")"
    elif [ -z "$new_theme_name" ]; then
      # if no theme is set show usage then exit
      usage
      exit
    fi

    # set new theme if not preferred theme
    if [ -e "${themes_dir:-"$config_dir"}/$(get_new_theme_with_ext)" ]; then
      update_config_link
      enforce_old_theme_mode
    else
      error 3 "error: could not find theme $new_theme_name"
    fi
    terminate
  fi
}

run_command () {
  config_link_name="$1"
  config_ext="$2"

  config_link_name_with_ext="$config_link_name$config_ext"
  config_link="$config_dir/$config_link_name_with_ext"

  current_theme="$(get_current_theme)"

  no_hst_file_err () {
    error 3 "error: could not find history file" "try setting a new theme first or verify write permissions"
  }

  case "$cmd" in
    "")
      set_theme
      ;;
    --show)
      # show current theme
      echo "$current_theme"
      exit
      ;;
    --history)
      if hst_file="$(get_history_file)"; then
        # show recently used themes
        tail -n "$history_count" < "$hst_file"
        exit
      else
        no_hst_file_err
      fi
      ;;
    --pop)
      if hst_file="$(get_history_file)"; then
        # delete number of themes from history
        new_history="$(head -n "-$pop_count" < "$hst_file")"
        echo "$new_history" > "$hst_file"
        exit
      else
        no_hst_file_err
      fi
      ;;
    --toggle)
      if hst_file="$(get_history_file)"; then
        # most recent theme
        lst_theme="$(tail -n 1 < "$hst_file")"
        # set most recent theme
        "$0" "$_ctx" "$lst_theme"
        exit
      else
        no_hst_file_err
      fi
      ;;
    --list)
      # list available themes
      ls "${list_opts[@]}" "${themes_dir:-"$config_dir"}" -I "$config_link_name_with_ext"
      exit
      ;;
    *)
      error 1 "error: unknown command $cmd"
      ;;
  esac
}

# parse cli args
while [ -n "$1" ]; do
  case "$1" in
    -h|--help)
      usage
      exit
      ;;
    -c|--current)
      cmd=--show
      shift
      ;;
    -t|--toggle)
      cmd=--toggle
      shift
      ;;
    -P|--pop)
      cmd=--pop
      if [[ ! $2 =~ ^[0-9]+$ ]]; then
        error 1 "error: must specify number of lines to pop"
      fi
      pop_count="$2"
      shift 2
      ;;
    -H|--history)
      cmd=--history
      if [[ ! $2 =~ ^[0-9]+$ ]]; then
        error 1 "error: must specify number of history lines to show"
      fi
      history_count="$2"
      shift 2
      ;;
    -l|--list)
      cmd=--list
      shift
      ;;
    -1)
      list_opts+=("-1")
      shift
      ;;
    -r|--random)
      cmd=--random
      shift
      ;;
    -n|--notification)
      use_notification=1
      shift
      ;;
    -q|--quiet)
      quiet=1
      shift
      ;;
    -g|--global)
      # if we have already set a context
      if [ -n "$_ctx" ]; then
        # it becomes the theme
        new_theme_name="$_ctx"
      fi

      # set context to global
      _ctx="$1"
      shift
      ;;
    *)
      if [ -z "$_ctx" ]; then
        # set context first
        _ctx="$1"
      else
        # then theme
        new_theme_name="$1"
      fi
      shift
      ;;
  esac
done

# define contexts
case "$_ctx" in
  ""|-g|--global)
    case "$cmd" in
      --list)
        if [[ ${list_opts[*]} == *-1* ]]; then
          echo "${all_ctx[@]}"
        else
          echo "${all_ctx[*]}"
        fi
        exit
        ;;
      *)
        # run command or set theme for each context
        for c in "${all_ctx[@]}"; do
          preserve_preferred_theme=true "$0" "$c" "${cmd:-"$new_theme_name"}"
        done
        terminate
        ;;
    esac
    ;;
  wallpaper)
    config_dir="$HOME/.wallpaper-themes"
    config_link_names=("current")
    config_exts=("")
    post_exec+="change-wallpaper -n -v;"
    ;;
  eww)
    config_dir="$HOME/.config/eww/themes"
    config_link_names=("current")
    config_exts=("")
    post_exec+="switch-bar reload eww;"
    ;;
  polybar)
    config_dir="$HOME/.config/polybar/themes"
    config_link_names=("current")
    config_exts=("")
    post_exec+="switch-bar reload polybar;"
    ;;
  rofi)
    config_dir="$HOME/.config/rofi/themes/"
    config_link_names=("current")
    config_exts=(".rasi")
    post_exec+=""
    ;;
  bspwm)
    config_dir="$HOME/.config/bspwm/themes"
    config_link_names=("current")
    config_exts=("")
    post_exec+="bspc wm -r"
    ;;
  bspwm-colors)
    config_dir="$HOME/.config/bspwm/colorschemes"
    config_link_names=("current")
    config_exts=("")
    post_exec+="bspc wm -r"
    ;;
  *)
    error 2 "error: could not find context $_ctx"
    ;;
esac

# update each config link for new theme
if [ "${#config_link_names[@]}" != "${#config_exts[@]}" ]; then
  error 5 "error: exactly one file ext for each config link name expected"
else
  for ((i=0; i<"${#config_link_names[@]}"; i++)); do
    run_command "${config_link_names[$i]}" "${config_exts[$i]}"
  done
fi

# TODO
# - global theme abstraction layer like in switch-mode
# - optional theme option to toggle command to toggle
#   between last two themes only if either is given
#   theme, otherwise set given theme
# - prev and next options (then uncomment sxhkdrc shortcut)
# - modular structure making it easy to add/remove themes defined
#   in conf files (also providing theme name to be read from
#   selector - if not provided defaults to name currently used)
# - add rename (current) theme option
